/*
 * CODENVY CONFIDENTIAL
 * __________________
 *
 *  [2012] - [2013] Codenvy, S.A.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Codenvy S.A. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Codenvy S.A.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Codenvy S.A..
 */
package com.codenvy.cli;

import com.beust.jcommander.*;
import com.beust.jcommander.converters.*;

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 * codenvy remote factory:create command and parameters.
 *
 */ 
@Parameters(separators = " ", commandDescription = "Packages a Codenvy project into a .c5y file or Factory URL")
public class CommandRemoteFactoryCreate implements CommandInterface {

    @Parameter(names = { "-h", "--help" }, description = "Prints this help")
	private boolean help;
    public boolean getHelp() { return help; }

    @Parameter(names = "--encoded", description = "If set, will create hashed Codenvy URL")
    private boolean encoded = false;
    
    @Parameter(names = "--file", converter = FileConverter.class, description = ".c5y file that contains parameters to place into Factory URL")
    private File inputFile;

    @Parameter(names = "--out", converter = FileConverter.class, description = "If set, outputs Factory parameters into .c5y file instead of Factory URL")
    private File outputFile;
    
    @Parameter(names = "--param", listConverter = JSONPairConverter.class, converter = JSONPairConverter.class, arity = 2, description = "Sets name/value pair.  First is name.  Second is value.  Can be used multiple times.")
    private List<JSONPair> params = new ArrayList<JSONPair>();

    @ParametersDelegate
	private CLIAuthParameterDelegate delegate = new CLIAuthParameterDelegate();

    public String getUsageLongDescription() {
		StringBuilder sb = new StringBuilder();
		sb.append("Generates a Codenvy Factory from a remote Codenvy cloud.  A Codenvy Factory is a URL\n");
		sb.append("that can be used to generate temporary workspaces with a pre-configured project in it.\n");
		sb.append("The spec format is at http://docs.codenvy.com/user/creating-factories/.\n");
		sb.append("\n");
		sb.append("This command will first locate the configuration parameters for the Factory and will\n");
		sb.append("then call a Codenvy REST API to generate the Factory URL with the parameters.  First,\n");
		sb.append("will search for default.c5y in current directory.  This file should have Factory\n");
		sb.append("parameters stored in JSON notation.  Next, we will load any parmaeters in the file \n");
		sb.append("specified by '--file'.  These parameters will override those loaded previously.\n");
		sb.append("Finally, parameters passed on the command line with '--param' will be added to those\n");
		sb.append("already discovered.\n");
		sb.append("\n");
		sb.append("We will then execute the REST Factory command against the Codenvy Cloud specified by\n");
		sb.append("--provider.  The default --provider is \"https://codenvy.com/\".\n");
		sb.append("\n");
		sb.append("If --encoded is specified, a URL with a hashed code for all of the parameters will be\n");
		sb.append("generated.  You need a valid API token to generate encoded URLs.  Non-encoded URLs\n");
		sb.append("can be generated by any client.\n");
		sb.append("\n");
		sb.append("To execute a valid Factory URL, use 'codenvy remote tmpws:create'.\n");			

		return sb.toString();
	}

	// Create a valid Factory URL with a set of parameters.
	// 1) Look for parameters in default.c5y in local directory.
	// 2) Load (override) any parameters in file specified by --file
	// 3) Load (override) any parameters passed in by --param
	// 4) If ! --encoded, then generate a non-encoded URL through string
	// 5) if --encoded, then call REST API to generate Factory URL
	// No test as to whether --provider is valid or not.
	// 6) If --out, then take the resulting URL and output parameters to specified file
    public void execute() {

    	// This is the default file to look for parameters.
    	final File default_file = new File("./default.c5y");

    	// The default Codenvy Factory reference.
    	final String default_reference = "factory?";

    	// Internal JSON Object to store / override parameters.
    	JSONObject factory_params = new JSONObject();

    	// The dynamically generated Factory URL
    	StringBuilder factory_url = new StringBuilder();


    	/*
    	 * STEP 1: Search for default.c5y in the current directory.
    	 *         If valid file, then Parse it as a JSONObject.
    	 *         Add the resulting parse to the factory_params Map.
    	 */
    	if (default_file != null) {
	    	boolean is_readable = default_file.exists() & default_file.canRead();

	    	// We have a valid default.c5y in local directory.
	    	// Load it, read in each parameter one at a time into map.
	    	if (is_readable) {
				JSONParser parser = new JSONParser();
    			JSONObject jsonObject = new JSONObject();

    			FileReader reader = null;

    			try {
    				reader = new FileReader(default_file);
        			factory_params = (JSONObject) parser.parse(reader);

        			} catch (IOException e) {
				        e.printStackTrace();
				    } catch (ParseException ex) {
				        System.out.println("###############################################################");
				        System.out.println("#### You have provided an invalid JSON file in default.c5y ####");
				        System.out.println("###############################################################");
				    } catch (RuntimeException e) {
				        e.printStackTrace();
				    } catch (Exception e) {
				        e.printStackTrace();
			    }
	    	} 
	    }


    	/*
    	 * STEP 2: Search for the file specified by --file
    	 *         If valid file, then Parse it as a JSONObject.
    	 *         Add the resulting parse to the factory_params Map.
    	 */
    	if (inputFile != null) {

	    	boolean is_readable = inputFile.exists() & inputFile.canRead();

	    	// We have a valid input file.
	    	// Load it, read in each parameter one at a time into map.
	    	if (is_readable) {
				JSONParser parser = new JSONParser();
    			JSONObject jsonObject = new JSONObject();
				FileReader reader = null;

    			try {
    				reader = new FileReader(inputFile);
        			JSONObject input_factory_params = (JSONObject) parser.parse(reader);

			    	Iterator input_iterator = input_factory_params.entrySet().iterator();
	    			while (input_iterator.hasNext()) {
	    				Map.Entry pairs = (Map.Entry)input_iterator.next();
	    				factory_params.put(pairs.getKey(), pairs.getValue());
	    			}
        		} catch (IOException e) {
				    e.printStackTrace();
				} catch (ParseException ex) {
			        System.out.println("############################################################");
			        System.out.println("#### You have provided an invalid JSON file with --file ####");
			        System.out.println("############################################################");
			    } catch (RuntimeException e) {
			        e.printStackTrace();
			    } catch (Exception e) {
			        e.printStackTrace();
				}
	    	}
		}


		/*
		 *  STEP 3: Add each --param name value to the Map.
		 */
		Iterator<JSONPair> iterator = params.iterator();
		while (iterator.hasNext()) {
			factory_params.put(iterator.next().getPair(), iterator.next().getPair());
		}	    	
    	
    	/* 
    	 * STEP 4: Generate a valid Factory URL.
    	 *         If --encoded, then call REST API to generate URL.
    	 *         If not encoded, then build manually.
    	 */ 
    	if (!encoded) {
	    	factory_url.append(delegate.getProvider() + default_reference);
	    	Iterator json_iterator = factory_params.entrySet().iterator();
	    	while (json_iterator.hasNext()) {
	    		Map.Entry pairs = (Map.Entry)json_iterator.next();
	    		factory_url.append(pairs.getKey());
	    		factory_url.append("=");
	    		factory_url.append(pairs.getValue());
	    		if (json_iterator.hasNext())
	    			factory_url.append("&");
	    	} 
	    } else {
   		
    		CLICredentials cred = CommandAuth.getCredentials(delegate.getProfile(),
                                                             delegate.getProvider(),
                                                             delegate.getUser(),
                                                             delegate.getPassword(),
                                                             delegate.getToken());

		        JSONObject api_return_data = null;
	        JSONObject api_input_data = factory_params;

    		// Format the appropriate input data for this REST command.
    		// Pass the input data into helper command, invoke REST command, and get response.
    		// Parse the response appropriately.
	        api_return_data = RESTAPIHelper.callRESTAPIAndRetrieveResponse(cred, api_input_data, RESTAPIHelper.REST_API_FACTORY_MULTI_PART);

    		if (api_return_data == null)
        		factory_url.append("");
    		else {
        		JSONArray list_of_urls = (JSONArray) api_return_data.get("links");
				Iterator<JSONObject> it = list_of_urls.iterator();
			
				while (it.hasNext()) {

					JSONObject link = (JSONObject) it.next();

					if (link.get("rel").equals("create-project")) {
						factory_url.append(link.get("href"));
					}

				}
    		}
	    }
		

		/* 
    	 * STEP 5: Generate an output file with the contents if outputFile is set.
    	 *         Always output the Factory URL to the console.
    	 */ 
    	if (outputFile != null) {
    		try {

    			// Likely will throw an exception if file you specified is in non-existant directory
	    		outputFile.createNewFile();

	    		FileWriter writer = new FileWriter(outputFile);

	    		factory_params.writeJSONString(writer);

	    		writer.flush();
	    		writer.close();

	    	} catch (java.io.IOException e) {
	    		e.printStackTrace();
	    	}
		} 
	    
	    System.out.println(factory_url.toString());

    }
}


