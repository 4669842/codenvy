<%

function getAllResults(viewName, queryParams) {
    var data = get('https://localhost:9443/api/view/build/' + viewName, queryParams, 'json');
    return convertJsonToTables(data['data']);
}

function queryResults(q) {
    var db = new Database("WSO2BAM_DATASOURCE");
    var result;
    try {
        result = db.query(q);
    }
    catch (e) {
        print("unable to query result :" + e);
    }
    finally {
        db.close();
    }

    return result;
}

function createTable(result) {
    var rows = [];
    var columns = []
    var columns2display = []

    for (var key in result[0]) {
        columns.push(key);
    }
    columns.sort();

    for (var col in columns) {
        columns2display.push(result[0][columns[col]]);
    }

    for (var i = 1; i < result.length; i++) {
        var row = []
        var obj = result[i];

        for (var col in columns) {
            row.push(obj[columns[col]]);
        }
        rows.push(row);
    }

    return {rows: rows, columns: columns2display};
}

function convertJsonToTables(data) {
    var result = {};

    // get sorted tables identifications
    var tableIds = [];
    for (var id in data) {
        tableIds.push(id);
    }
    tableIds.sort();

    for (var t = 0; t < tableIds.length; t++) {
        var rows = [];
        var columns = [];

        // get sorted rows' identifications
        var rowIds = [];
        for (var id in data[tableIds[t]]) {
            rowIds.push(id);
        }
        rowIds.sort();

        // get sorted columns' identifications
        var colIds = [];
        for (var id in data[tableIds[t]]['r00']) {
            colIds.push(id);
        }
        colIds.sort();

        for (var r = 0; r < rowIds.length; r++) {
            if (r == 0) {
                for (var c = 0; c < colIds.length; c++) {
                    columns.push(data[tableIds[t]][rowIds[r]][colIds[c]]);
                }
            } else {
                var row = [];
                for (var c = 0; c < colIds.length; c++) {
                    row.push(data[tableIds[t]][rowIds[r]][colIds[c]]);
                }
                rows.push(row);
            }
        }

        result[t] = {rows: rows, columns: columns};
    }

    return result;
}

function printTable(table) {
    print('<table cellspacing="0" class="database-table" align="center">');
    print('<thead aria-hidden="false">');
    print('<tr>');

    // print first cell of header
    if (table.columns.length > 0) {
        print('<th class="header">');
        print(table.columns[0]);
        print('</th>');
    }

    // print other cells of header    
    for (var i = 1; i < table.columns.length; i++) {
        print('<th class="header">');
        print(table.columns[i]);
        print('</th>');
    }
    print('</tr>');
    print('</thead>');

    // print table body
    print('<tbody>');
    for (var i = 0; i < table.rows.length; i = i + 2) {
        // print odd row
        print('<tr>');

        // print first cell
        print('<td class="cell first-cell text-cursor">');
        print('<div style="outline-style: none;" tabindex="0">');
        print(table.rows[i][0]);
        print('</div>');
        print('</td>');

        // print another cells
        for (var j = 1; j < table.columns.length; j++) {
            print('<td class="cell">');
            print('<div style="outline-style: none;" tabindex="0">');
            print(table.rows[i][j]);
            print('</div>');
            print('</td>');
        }
        print('</tr>');

        // print pair row
        if (i < table.rows.length - 1) {
            print('<tr class="pair-row">');

            // print first cell
            print('<td class="cell first-cell">');
            print('<div style="outline-style: none;" tabindex="0">');
            print(table.rows[i + 1][0]);
            print('</div>');
            print('</td>');

            // print another cells
            for (var j = 1; j < table.columns.length; j++) {
                print('<td class="cell">');
                print('<div style="outline-style: none;" tabindex="0">');
                print(table.rows[i + 1][j]);
                print('</div>');
                print('</td>');
            }

            print('</tr>');
        }
    }

    print('<tfoot aria-hidden="true" style="display: none;"></tfoot>');
    print('</tbody>');
    print('</table>');
}

function printTableVerticalRow(table) {
    print('<table cellspacing="0" class="database-table-vertical-row" align="center">');
    print('<tbody>');

    // print other cells name + cell
    for (var i = 0; i < table.columns.length; i++) {
        print("<tr>");
        print("<th class='cell-name'>");
        print(table.columns[i] + ":");
        print("</th>");

        print("<td class='cell'>");
        print(table.rows[i][0]);
        print("</td>");
        print("</tr>");
    }


    print('</tbody>');
    print('</table>');
}

function loadCssStyles() {
    print('<link href="css/single-column.css" rel="stylesheet" type="text/css" />');
    print('<link href="css/view.css" rel="stylesheet" type="text/css" />');
    print('<link href="css/database-table.css" rel="stylesheet" type="text/css" />');
    print('<link href="css/page-navigator.css" rel="stylesheet" type="text/css" />');
}


//load handlers of table events
function loadTableHandlers(ignoreLastRow) {
    print('<script src="scripts/database-table.js"></script>');
    print('<script>databaseTable.setupRowHandlers(' + ignoreLastRow.toString() + ');</script>');
    print('<script>databaseTable.setupVerticalRowHandlers();</script>');
}


/**
 * currentPageNumber is 1-based
 */
function printBottomPageNavigator(pageCount, currentPageNumber, queryString) {
    if (typeof pageCount == "undefined" || pageCount <= 0) {
        return;
    }
    
    print("<div class='bottom-page-navigator'>");

    
    // print "previous page" link
    if (currentPageNumber > 1) {
        var previousPageLink = getPageNavigationUrl(queryString, currentPageNumber - 1);
        
        print("<a class='page-link previous' href='" + previousPageLink + "'>&lt;</a>");
    }

    // print all pages links
    for (var i = 0; i < pageCount; i++) {
        var pageNumber = (i + 1);
        
        var href = getPageNavigationUrl(queryString, pageNumber);
        
        var elementClass = "page-link";

        if (pageNumber == currentPageNumber) {
            elementClass += " current";
        }

        print("<a class='" + elementClass + "' href='" + href + "'>" + pageNumber + "</a>");
    }

    // print "next page" link
    if (currentPageNumber < pageCount) {
        var nextPageLink = getPageNavigationUrl(queryString, currentPageNumber + 1);
        
        print("<a class='page-link next' href='" + nextPageLink + "'>&gt;</a>");
    } else {
        print("<div class='page-link empty'></div>");
    }

    print("</div>");
}


function getPageNavigationUrl(baseQueryString, pageNumber) {   
   var CURRENT_PAGE_QUERY_PARAMETER = "page";   
   var url = "?" + CURRENT_PAGE_QUERY_PARAMETER + "=" + pageNumber;
   
   if (baseQueryString != "") {
      url += "&" + baseQueryString;
   }
   
   return url;
}

%>